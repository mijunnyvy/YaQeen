"use client"

import type React from "react"
import { createContext, useContext, useState, useEffect } from "react"
import { useTranslation } from "react-i18next"
import "../lib/i18n"

interface LanguageContextType {
  language: string
  setLanguage: (lang: string) => void
  isRTL: boolean
  hasSelectedLanguage: boolean
  setHasSelectedLanguage: (selected: boolean) => void
}

const LanguageContext = createContext<LanguageContextType | undefined>(undefined)

export function LanguageProvider({ children }: { children: React.ReactNode }) {
  const { i18n } = useTranslation()
  const [language, setLanguageState] = useState("en")
  const [hasSelectedLanguage, setHasSelectedLanguage] = useState(false)
  const isRTL = language === "ar"

  useEffect(() => {
    // Check if user has previously selected a language
    const savedLanguage = localStorage.getItem("yaqeen-language")
    const hasSelected = localStorage.getItem("yaqeen-language-selected") === "true"

    if (savedLanguage && hasSelected) {
      setLanguageState(savedLanguage)
      setHasSelectedLanguage(true)
      i18n.changeLanguage(savedLanguage)

      // Apply RTL/LTR direction
      document.documentElement.dir = savedLanguage === "ar" ? "rtl" : "ltr"
      document.documentElement.lang = savedLanguage
    }
  }, [i18n])

  const setLanguage = (lang: string) => {
    setLanguageState(lang)
    setHasSelectedLanguage(true)
    i18n.changeLanguage(lang)

    // Save to localStorage
    localStorage.setItem("yaqeen-language", lang)
    localStorage.setItem("yaqeen-language-selected", "true")

    // Apply RTL/LTR direction
    document.documentElement.dir = lang === "ar" ? "rtl" : "ltr"
    document.documentElement.lang = lang
  }

  return (
    <LanguageContext.Provider
      value={{
        language,
        setLanguage,
        isRTL,
        hasSelectedLanguage,
        setHasSelectedLanguage,
      }}
    >
      {children}
    </LanguageContext.Provider>
  )
}

export function useLanguage() {
  const context = useContext(LanguageContext)
  if (context === undefined) {
    throw new Error("useLanguage must be used within a LanguageProvider")
  }
  return context
}
