"use client"

import { createContext, useContext, useState, useEffect, type ReactNode } from "react"

interface AdkarItem {
  id: string
  arabic: string
  transliteration: string
  translation: string
  repetitions: number
  source?: string
  benefits?: string
}

interface AdkarProgress {
  [categoryId: string]: {
    [adkarId: string]: {
      completed: number
      lastCompleted?: Date
    }
  }
}

interface AdkarSettings {
  fontSize: "small" | "medium" | "large"
  fontFamily: "amiri" | "normal"
  darkMode: boolean
  notifications: boolean
  autoAdvance: boolean
  showTranslation: boolean
  showTransliteration: boolean
}

interface AdkarContextType {
  progress: AdkarProgress
  settings: AdkarSettings
  showSettings: boolean
  setShowSettings: (show: boolean) => void
  updateProgress: (categoryId: string, adkarId: string, completed: number) => void
  resetProgress: (categoryId: string) => void
  getTotalProgress: () => number
  getCategoryProgress: (categoryId: string) => number
  getStreakCount: () => number
  updateSettings: (newSettings: Partial<AdkarSettings>) => void
  getAdkarData: (categoryId: string) => AdkarItem[]
}

const AdkarContext = createContext<AdkarContextType | undefined>(undefined)

const adkarDatabase: { [key: string]: AdkarItem[] } = {
  morning: [
    {
      id: "ayat-kursi",
      arabic:
        "اللَّهُ لَا إِلَٰهَ إِلَّا هُوَ الْحَيُّ الْقَيُّومُ ۚ لَا تَأْخُذُهُ سِنَةٌ وَلَا نَوْمٌ ۚ لَهُ مَا فِي السَّمَاوَاتِ وَمَا فِي الْأَرْضِ ۗ مَنْ ذَا الَّذِي يَشْفَعُ عِنْدَهُ إِلَّا بِإِذْنِهِ ۚ يَعْلَمُ مَا بَيْنَ أَيْدِيهِمْ وَمَا خَلْفَهُمْ ۖ وَلَا يُحِيطُونَ بِشَيْءٍ مِنْ عِلْمِهِ إِلَّا بِمَا شَاءَ ۚ وَسِعَ كُرْسِيُّهُ السَّمَاوَاتِ وَالْأَرْضَ ۖ وَلَا يَئُودُهُ حِفْظُهُمَا ۚ وَهُوَ الْعَلِيُّ الْعَظِيمُ",
      transliteration: "Ayat al-Kursi",
      translation: "Allah - there is no deity except Him, the Ever-Living, the Sustainer of existence...",
      repetitions: 1,
      source: "Quran 2:255",
      benefits: "Protection throughout the day",
    },
    {
      id: "morning-protection",
      arabic: "أَعُوذُ بِكَلِمَاتِ اللَّهِ التَّامَّاتِ مِنْ شَرِّ مَا خَلَقَ",
      transliteration: "A'udhu bi kalimat Allah at-tammat min sharri ma khalaq",
      translation: "I seek refuge in the perfect words of Allah from the evil of what He has created",
      repetitions: 3,
      source: "Sahih Muslim",
      benefits: "Protection from harm",
    },
    {
      id: "subhan-allah-morning",
      arabic: "سُبْحَانَ اللَّهِ وَبِحَمْدِهِ",
      transliteration: "Subhan Allah wa bihamdihi",
      translation: "Glory be to Allah and praise be to Him",
      repetitions: 100,
      source: "Sahih Bukhari",
      benefits: "Forgiveness of sins",
    },
  ],
  evening: [
    {
      id: "evening-protection",
      arabic: "أَعُوذُ بِكَلِمَاتِ اللَّهِ التَّامَّاتِ مِنْ شَرِّ مَا خَلَقَ",
      transliteration: "A'udhu bi kalimat Allah at-tammat min sharri ma khalaq",
      translation: "I seek refuge in the perfect words of Allah from the evil of what He has created",
      repetitions: 3,
      source: "Sahih Muslim",
      benefits: "Protection during the night",
    },
    {
      id: "evening-gratitude",
      arabic: "اللَّهُمَّ أَنْتَ رَبِّي لَا إِلَٰهَ إِلَّا أَنْتَ خَلَقْتَنِي وَأَنَا عَبْدُكَ",
      transliteration: "Allahumma anta rabbi la ilaha illa ant, khalaqtani wa ana 'abduk",
      translation: "O Allah, You are my Lord, there is no god but You. You created me and I am Your servant",
      repetitions: 1,
      source: "Sahih Bukhari",
      benefits: "Seeking Allah's forgiveness",
    },
  ],
  night: [
    {
      id: "sleep-protection",
      arabic: "بِاسْمِكَ اللَّهُمَّ أَمُوتُ وَأَحْيَا",
      transliteration: "Bismika Allahumma amutu wa ahya",
      translation: "In Your name, O Allah, I die and I live",
      repetitions: 1,
      source: "Sahih Bukhari",
      benefits: "Protection during sleep",
    },
    {
      id: "night-forgiveness",
      arabic: "أَسْتَغْفِرُ اللَّهَ الَّذِي لَا إِلَٰهَ إِلَّا هُوَ الْحَيَّ الْقَيُّومَ وَأَتُوبُ إِلَيْهِ",
      transliteration: "Astaghfir Allah alladhi la ilaha illa huwa al-hayy al-qayyum wa atubu ilayh",
      translation:
        "I seek forgiveness from Allah, there is no god but Him, the Ever-Living, the Sustainer, and I repent to Him",
      repetitions: 3,
      source: "Abu Dawud",
      benefits: "Forgiveness of sins before sleep",
    },
  ],
  daily: [
    {
      id: "daily-tasbih",
      arabic: "سُبْحَانَ اللَّهِ",
      transliteration: "Subhan Allah",
      translation: "Glory be to Allah",
      repetitions: 33,
      source: "Sahih Muslim",
      benefits: "Daily remembrance",
    },
    {
      id: "daily-hamd",
      arabic: "الْحَمْدُ لِلَّهِ",
      transliteration: "Alhamdulillah",
      translation: "All praise is due to Allah",
      repetitions: 33,
      source: "Sahih Muslim",
      benefits: "Gratitude to Allah",
    },
    {
      id: "daily-takbir",
      arabic: "اللَّهُ أَكْبَرُ",
      transliteration: "Allahu Akbar",
      translation: "Allah is the Greatest",
      repetitions: 34,
      source: "Sahih Muslim",
      benefits: "Magnifying Allah",
    },
  ],
  prayer: [
    {
      id: "post-prayer-tasbih",
      arabic: "سُبْحَانَ اللَّهِ",
      transliteration: "Subhan Allah",
      translation: "Glory be to Allah",
      repetitions: 33,
      source: "Sahih Muslim",
      benefits: "After each prayer",
    },
    {
      id: "post-prayer-hamd",
      arabic: "الْحَمْدُ لِلَّهِ",
      transliteration: "Alhamdulillah",
      translation: "All praise is due to Allah",
      repetitions: 33,
      source: "Sahih Muslim",
      benefits: "After each prayer",
    },
  ],
}

export function AdkarProvider({ children }: { children: ReactNode }) {
  const [progress, setProgress] = useState<AdkarProgress>({})
  const [settings, setSettings] = useState<AdkarSettings>({
    fontSize: "medium",
    fontFamily: "amiri",
    darkMode: false,
    notifications: true,
    autoAdvance: false,
    showTranslation: true,
    showTransliteration: true,
  })
  const [showSettings, setShowSettings] = useState(false)

  useEffect(() => {
    try {
      const savedProgress = localStorage.getItem("adkar-progress")
      const savedSettings = localStorage.getItem("adkar-settings")

      if (savedProgress) {
        const parsedProgress = JSON.parse(savedProgress)
        // Convert date strings back to Date objects
        Object.keys(parsedProgress).forEach((categoryId) => {
          Object.keys(parsedProgress[categoryId]).forEach((adkarId) => {
            if (parsedProgress[categoryId][adkarId].lastCompleted) {
              parsedProgress[categoryId][adkarId].lastCompleted = new Date(
                parsedProgress[categoryId][adkarId].lastCompleted,
              )
            }
          })
        })
        setProgress(parsedProgress)
      }

      if (savedSettings) {
        setSettings(JSON.parse(savedSettings))
      }
    } catch (error) {
      console.error("Error loading Adkar data from localStorage:", error)
    }
  }, [])

  useEffect(() => {
    try {
      localStorage.setItem("adkar-progress", JSON.stringify(progress))
    } catch (error) {
      console.error("Error saving Adkar progress to localStorage:", error)
    }
  }, [progress])

  useEffect(() => {
    try {
      localStorage.setItem("adkar-settings", JSON.stringify(settings))
    } catch (error) {
      console.error("Error saving Adkar settings to localStorage:", error)
    }
  }, [settings])

  const updateProgress = (categoryId: string, adkarId: string, completed: number) => {
    setProgress((prev) => ({
      ...prev,
      [categoryId]: {
        ...prev[categoryId],
        [adkarId]: {
          completed,
          lastCompleted: new Date(),
        },
      },
    }))
  }

  const resetProgress = (categoryId: string) => {
    setProgress((prev) => ({
      ...prev,
      [categoryId]: {},
    }))
  }

  const getTotalProgress = (): number => {
    const categories = Object.keys(adkarDatabase)
    let totalCompleted = 0
    let totalRequired = 0

    categories.forEach((categoryId) => {
      const categoryData = adkarDatabase[categoryId]
      const categoryProgress = progress[categoryId] || {}

      categoryData.forEach((adkar) => {
        const adkarProgress = categoryProgress[adkar.id]
        totalCompleted += adkarProgress?.completed || 0
        totalRequired += adkar.repetitions
      })
    })

    return totalRequired > 0 ? (totalCompleted / totalRequired) * 100 : 0
  }

  const getCategoryProgress = (categoryId: string): number => {
    const categoryData = adkarDatabase[categoryId] || []
    const categoryProgress = progress[categoryId] || {}

    let totalCompleted = 0
    let totalRequired = 0

    categoryData.forEach((adkar) => {
      const adkarProgress = categoryProgress[adkar.id]
      totalCompleted += adkarProgress?.completed || 0
      totalRequired += adkar.repetitions
    })

    return totalRequired > 0 ? (totalCompleted / totalRequired) * 100 : 0
  }

  const getStreakCount = (): number => {
    // Simple implementation - count consecutive days with any progress
    // In a real app, this would be more sophisticated
    const today = new Date().toDateString()
    let streak = 0

    // Check if user has any progress today
    const hasProgressToday = Object.values(progress).some((category) =>
      Object.values(category).some((adkar) => adkar.lastCompleted && adkar.lastCompleted.toDateString() === today),
    )

    if (hasProgressToday) {
      streak = 1 // Simplified - in real app would check previous days
    }

    return streak
  }

  const updateSettings = (newSettings: Partial<AdkarSettings>) => {
    setSettings((prev) => ({ ...prev, ...newSettings }))
  }

  const getAdkarData = (categoryId: string): AdkarItem[] => {
    return adkarDatabase[categoryId] || []
  }

  const value: AdkarContextType = {
    progress,
    settings,
    showSettings,
    setShowSettings,
    updateProgress,
    resetProgress,
    getTotalProgress,
    getCategoryProgress,
    getStreakCount,
    updateSettings,
    getAdkarData,
  }

  return <AdkarContext.Provider value={value}>{children}</AdkarContext.Provider>
}

export function useAdkar() {
  const context = useContext(AdkarContext)
  if (context === undefined) {
    throw new Error("useAdkar must be used within an AdkarProvider")
  }
  return context
}
